import { Certificate } from '../core/types';
import * as tf from '@tensorflow/tfjs-node';
import { CertificateFeatureExtractor } from './feature-extractor';

export class AIVulnerabilityDetector {
    private model: tf.LayersModel;
    private featureExtractor: CertificateFeatureExtractor;

    constructor() {
        this.featureExtractor = new CertificateFeatureExtractor();
        this.initializeModel();
    }

    private async initializeModel() {
        this.model = tf.sequential({
            layers: [
                tf.layers.dense({ inputShape: [50], units: 128, activation: 'relu' }),
                tf.layers.dropout({ rate: 0.3 }),
                tf.layers.dense({ units: 64, activation: 'relu' }),
                tf.layers.dropout({ rate: 0.2 }),
                tf.layers.dense({ units: 32, activation: 'relu' }),
                tf.layers.dense({ units: 1, activation: 'sigmoid' })
            ]
        });

        this.model.compile({
            optimizer: tf.train.adam(0.001),
            loss: 'binaryCrossentropy',
            metrics: ['accuracy']
        });
    }

    public async analyzeCertificate(certificate: Certificate) {
        const features = await this.featureExtractor.extract(certificate);
        const tensorFeatures = tf.tensor2d([features], [1, features.length]);
        const prediction = await this.model.predict(tensorFeatures) as tf.Tensor;
        return (await prediction.data())[0];
    }
}